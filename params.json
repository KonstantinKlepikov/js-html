{"name":"JsHtml","tagline":"Blend server side JavaScript with HTML pages","body":"[![Build Status](https://img.shields.io/travis/bryanwayb/js-html.svg)](https://travis-ci.org/bryanwayb/js-html) [![Release Version](https://img.shields.io/github/release/bryanwayb/js-html.svg)](https://github.com/bryanwayb/js-html/releases) [![Code Coverage](https://img.shields.io/codecov/c/github/bryanwayb/js-html.svg)](https://codecov.io/github/bryanwayb/js-html) [![Codacy Grade](https://img.shields.io/codacy/d22a37360df842f9aeb3a9705379647a.svg)](https://www.codacy.com/app/bryanwayb/js-html) [![License](https://img.shields.io/github/license/bryanwayb/js-html.svg)](https://github.com/bryanwayb/js-html/blob/master/LICENSE) \r\n\r\nA module for loading and compiling markup infused scripts.\r\n\r\n#Library Use\r\nThe `js-html `library has two main components, the `compile()` function and the `JsHtml` object.\r\n\r\n```JavaScript\r\nvar jsHtmlModule = require(\"js-html\"); // Exports compile and JsHtml\r\n```\r\n\r\n###JsHtml\r\nThe `JsHtml` is the worker object, where most of the processing is performed. It's responsible for taking the output of `compile()` and putting it to work. (See below for `compile()` usage).\r\n\r\nThe object is initialized with the following arguments:\r\n\r\n```Javascript\r\nnew JsHtml([filepath [, options]]);\r\n    /*\r\n        options: {\r\n            encoding: \"utf8\"    // The encoding to use when working with Buffers\r\n        }\r\n    */\r\n```\r\n\r\nThese are the functions that are available:\r\n\r\n```Javascript\r\nJsHtml.loadFile(filepath) // Loads a file and prepares internal buffers for compilation\r\nJsHtml.reloadFile() // Forces the currently loaded file to be reloaded.\r\nJsHtml.closeFile() // Closes the current file and resets the internal buffer\r\nJsHtml.loadBuffer(buffer) // Load passed buffer (string or Buffer object)\r\nJsHtml.reset() // Resets the internal buffer, compiled script, and VM context.\r\nJsHtml.compile() // Actually compiles the code taking into account buffer source.\r\nJsHtml.compileVM() // Calls `JsHtml.compile()`, creates a security context model, and returns a VM function.\r\nJsHtml.render() // Compiles, loads, and executes the loaded buffer. Returns the rendered string.\r\n```\r\n####Example\r\n\r\nThe following will take an input script, compile and render it, then save the rendered version into an `.html` file.\r\n\r\n#####index.js:\r\n```JavaScript\r\nvar fs = require('fs'),\r\n\tJsHtml = require('js-html').JsHtml;\r\n\r\nvar script = new JsHtml('./script.jshtml');\r\nfs.writeFileSync('./rendered.html', script.render());\r\n```\r\n\r\n#####script.jshtml\r\n```HTML\r\n<html>\r\n\t<head>\r\n\t\t<title>Example JsHtml Page</title>\r\n\t</head>\r\n\t<body>\r\n\t\t<h1>Example JsHtml Page</h1>\r\n\t\t<p><?js process.stdout.write('This is being written to the page via process.stdout.write()'); ?></p>\r\n\t</body>\r\n</html>\r\n```\r\n\r\n###compile\r\nThe `compile()` function is used to transform plain text and inline code into a valid, executable JavaScript string. Here is a basic example:\r\n\r\n```JavaScript\r\nconsole.log(compile(\"A plain string of text\"));\r\n// Output:\r\n//      process.stdout.write(\"A plain string of text\");\r\n```\r\n\r\nThe above example is pretty boring. To make things a bit more interesting, we can add sections of JavaScript code to be factored into the compilation. `Code blocks` are defined with the following syntax:\r\n\r\n * `<?js /* JavaScript code goes here */ ?>`\r\n * `<% /* More JavaScript code */ %>`\r\n\r\nHere's an example with a code block:\r\n\r\n```Javascript\r\nconsole.log(\r\n    compile(\"Inline JavaScript Example: <?js process.stdout.write('Generated inside JavaScript');\")\r\n);\r\n// Output:\r\n//      process.stdout.write('Inline JavaScript Example: '); process.stdout.write('Generated inside JavaScript');\r\n```\r\n\r\nThe `compile()` execution path is fairly straightforward, code embeddable markup gets passed, compiled JavaScript is returned.\r\n\r\n****\r\n\r\n###Installing\r\n\r\n**npm**\r\n```Bash\r\nnpm install js-html\r\n```\r\n\r\n**git**\r\n```Bash\r\ngit clone https://github.com/bryanwayb/js-html.git\r\ncd js-html\r\nnpm install\r\n```\r\n\r\n###Running Tests\r\n\r\n`js-html` has been configured for numerous tests to test compatibility with a specific JavaScript engine. If you would like to run these tests run the below command while in the modules root directory:\r\n\r\n```Bash\r\nnpm test\r\n```","google":"UA-44189065-3","note":"Don't delete this file! It's used internally to help with page regeneration."}